/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

//enum for different motors
typedef enum {
    MOTOR_A,
    MOTOR_B,
    MOTOR_C,
    MOTOR_D,
    MOTOR_E
} MotorNum;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;
uint8_t motor_states[5];

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEPPER_C1_Pin|STEPPER_C2_Pin|STEPPER_C3_Pin|STEPPER_C4_Pin
                          |STEPPER_D1_Pin|STEPPER_D2_Pin|STEPPER_D3_Pin|STEPPER_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_A1_Pin|STEPPER_A3_Pin|STEPPER_A4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_E1_Pin|STEPPER_E2_Pin|STEPPER_E3_Pin|STEPPER_E4_Pin
                          |STEPPER_B1_Pin|STEPPER_B2_Pin|STEPPER_B3_Pin|STEPPER_B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : STEPPER_C1_Pin STEPPER_C2_Pin STEPPER_C3_Pin STEPPER_C4_Pin
                           STEPPER_D1_Pin STEPPER_D2_Pin STEPPER_D3_Pin STEPPER_D4_Pin */
  GPIO_InitStruct.Pin = STEPPER_C1_Pin|STEPPER_C2_Pin|STEPPER_C3_Pin|STEPPER_C4_Pin
                          |STEPPER_D1_Pin|STEPPER_D2_Pin|STEPPER_D3_Pin|STEPPER_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin STEPPER_A1_Pin STEPPER_A3_Pin STEPPER_A4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_A1_Pin|STEPPER_A3_Pin|STEPPER_A4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : STEPPER_E1_Pin STEPPER_E2_Pin STEPPER_E3_Pin STEPPER_E4_Pin
                           STEPPER_B1_Pin STEPPER_B2_Pin STEPPER_B3_Pin STEPPER_B4_Pin */
  GPIO_InitStruct.Pin = STEPPER_E1_Pin|STEPPER_E2_Pin|STEPPER_E3_Pin|STEPPER_E4_Pin
                          |STEPPER_B1_Pin|STEPPER_B2_Pin|STEPPER_B3_Pin|STEPPER_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : STEPPER_A2_Pin */
  GPIO_InitStruct.Pin = STEPPER_A2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIO_Port2, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

// main.c

// Set the GPIO state to drive the stepper motor coils
void Stepper_SetHalfStepState(uint8_t state, MotorNum motor)
{
	GPIO_TypeDef GPIO_Port1;
	GPIO_TypeDef GPIO_Port2;
	GPIO_TypeDef GPIO_Port3;
	GPIO_TypeDef GPIO_Port4;

	// Set the 4 motor GPIOs based on the motor
	switch(motor)
	{
		case MOTOR_A:
			GPIO_Port1 = STEPPER_A1_GPIO_Port;
			GPIO_Port2 = STEPPER_A2_GPIO_Port;
			GPIO_Port3 = STEPPER_A3_GPIO_Port;
			GPIO_Port4 = STEPPER_A4_GPIO_Port;
			break;
		case MOTOR_B:
			GPIO_Port1 = STEPPER_B1_GPIO_Port;
			GPIO_Port2 = STEPPER_B2_GPIO_Port;
			GPIO_Port3 = STEPPER_B3_GPIO_Port;
			GPIO_Port4 = STEPPER_B4_GPIO_Port;
			break;
		case MOTOR_C:
			GPIO_Port1 = STEPPER_C1_GPIO_Port;
			GPIO_Port2 = STEPPER_C2_GPIO_Port;
			GPIO_Port3 = STEPPER_C3_GPIO_Port;
			GPIO_Port4 = STEPPER_C4_GPIO_Port;
			break;
		case MOTOR_D:
			GPIO_Port1 = STEPPER_D1_GPIO_Port;
			GPIO_Port2 = STEPPER_D2_GPIO_Port;
			GPIO_Port3 = STEPPER_D3_GPIO_Port;
			GPIO_Port4 = STEPPER_D4_GPIO_Port;
			break;
		case MOTOR_E:
			GPIO_Port1 = STEPPER_E1_GPIO_Port;
			GPIO_Port2 = STEPPER_E2_GPIO_Port;
			GPIO_Port3 = STEPPER_E3_GPIO_Port;
			GPIO_Port4 = STEPPER_E4_GPIO_Port;
			break;
	}

	// Set the 4 motor GPIO states based on the stepper state
	switch(state)
    {
        case 0: // Step 1: Energize A1
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_RESET);
            break;
        case 1: // Step 2: Energize A1 and A2
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_RESET);
            break;
        case 2: // Step 3: Energize A2
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_RESET);
            break;
        case 3: // Step 4: Energize A2 and A3
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_RESET);
            break;
        case 4: // Step 5: Energize A3
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_RESET);
            break;
        case 5: // Step 6: Energize A3 and A4
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_SET);
            break;
        case 6: // Step 7: Energize A4
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_SET);
            break;
        case 7: // Step 8: Energize A4 and A1
            HAL_GPIO_WritePin(GPIO_Port1, STEPPERA1_Pin, GPIO_PIN_SET);
            HAL_GPIO_WritePin(GPIO_Port2, STEPPERA2_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port3, STEPPERA3_Pin, GPIO_PIN_RESET);
            HAL_GPIO_WritePin(GPIO_Port4, STEPPERA4_Pin, GPIO_PIN_SET);
            break;
    }
}

// Move the stepper motor one half-step forward
void Stepper_HalfStepForward(MotorNum motor)
{
    Stepper_SetHalfStepState(motor_states[motor], motor);
    motor_states[motor]++;

    // Loop back to the first state
    if (motor_states[motor] > 7)
    	motor_states[motor] = 0;

    HAL_Delay(10);  // Adjust delay for step speed
}

// Move the stepper motor one half-step backward
void Stepper_HalfStepBackward(void)
{
    static uint8_t step = 7;
    Stepper_SetHalfStepState(step);
    step--;
    if (step > 7) step = 7;  // Loop back to the last state
    HAL_Delay(10);  // Adjust delay for step speed
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
